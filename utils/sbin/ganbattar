#!/usr/bin/env ruby
#
# Copyright (c) 2014 Kohei Takahashi <flast@flast.jp>
# This script distributed under MIT License, for more details see LICENSE.
#
# named by "Yoshihiro Ura <support@fuuzu.net>" - https://github.com/kyubuns/

@enable_debug = false

def debug(mes)
  puts " "*8+"debug: "+mes if @enable_debug
end

class Header
  def initialize(hb)
    raise "magic mismatch" unless hb[257, 5] == 'ustar'

    @name = hb[0, 100].rstrip.gsub(/[^[:print:]]/) {|m| '#'}
    @size = hb[124, 12].oct
    @type = hb[156]
  end

  def name() @name end
  def size() @size end
  def type() @type end

  def dirname() File.dirname(name) end
  def basename() File.basename(name) end

  def self.find_next(inb, unit = 512)
    while true
      block = inb.read(unit)
      return nil if block == nil

      i = block.index("ustar")
      next if i == nil
      return block if i == 257

      puts "info: Index of magic mismatched, try to reindexing..."
      inb.seek(-(unit + 257 - i), IO::SEEK_CUR)
    end
  end

  def self.next(inb, unit = 512)
    b = find_next(inb, unit)
    Header.new(b) unless b == nil
  end
end

class Entry < Header
  def initialize(hb, io)
    super(hb)
    @io = io
    @cur = @pos = io.pos
  end

  def self.next(inb, unit = 512)
    b = find_next(inb, unit)
    Entry.new(b, inb) unless b == nil
  end

  def read(length = nil)
    preserve = @io.pos
    @io.pos = @cur

    remain = size - (@cur - @pos)
    return nil if remain == 0
    length = remain if length == nil or length > remain
    b = @io.read(length)
    @cur = @io.pos

    @io.pos = preserve
    b
  end
end

def mkdir_recur(path)
  return if Dir.exists?(path)

  mkdir_recur(File.dirname(path))
  Dir.mkdir(path)
end

def redirect(from, to, size, unit = 4 * 1024)
  debug "try to write #{size} bytes"
  written = 0
  while size > written
    w = (size - written) > unit ? unit : (size - written);
    written += to.write(from.read(w))
    debug "{write unit: #{w}, total written: #{written}}"
  end
  written
end

File.open(ARGV[0], 'rb') {|inb|
  while true
    e = Entry.next(inb)
    break if e == nil

    case e.type
    when "5"
      puts "info: Skip directory entry: #{e.name}"
    else
      mkdir_recur(e.dirname)
      File.open(e.name, 'wb') {|outb|
        done = redirect(e, outb, e.size)
        puts "written #{e.name}"
        puts "   warning: #{e.size} bytes expected but written #{done} bytes..." if e.size != done
      }
    end
  end
}
